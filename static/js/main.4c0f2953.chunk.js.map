{"version":3,"sources":["app/hooks.ts","features/currentTodo.ts","components/TodoItem.tsx/TodoItem.tsx","components/TodoList/TodoList.tsx","features/filter.ts","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","components/helpers/getFilteredTodos.tsx","features/todos.ts","App.tsx","app/store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","actions","todo","type","payload","currentTodoReducer","state","action","TodoItem","dispatch","selectedTodo","currentTodo","id","title","completed","isSelected","className","classNames","onClick","TodoList","props","todos","map","initState","query","select","filterReducer","TodoFilter","filter","value","onChange","event","target","placeholder","style","pointerEvents","length","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","Loader","TodoModal","useState","user","setUser","useEffect","a","href","email","name","includesValue","searchStr","toLowerCase","includes","todosReducer","App","todosFromServer","setTodosFromServer","todoListLoaded","setTodolistLoaded","visibleTodos","searchValue","selectValue","newTodos","Error","getFilteredTodos","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4c0f2953.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => {\n  const dispatch = useAppDispatch();\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  const { id, title, completed } = todo;\n\n  const isSelected = (id === selectedTodo?.id) || false;\n\n  const handleSelectTodoBtn = () => {\n    dispatch(actions.setTodo(todo));\n  };\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={classNames(\n        { 'has-background-info-light': isSelected },\n      )}\n      key={id}\n    >\n      <td className=\"is-vcentered\">{id}</td>\n      {completed\n        ? (\n          <td className=\"is-vcentered\">\n            <span className=\"icon\" data-cy=\"iconCompleted\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </td>\n        )\n        : <td className=\"is-vcentered\" />}\n\n      <td className=\"is-vcentered is-expanded\">\n        <p className={classNames(\n          { 'has-text-success': completed },\n          { 'has-text-danger': !completed },\n        )}\n        >\n          {title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={handleSelectTodoBtn}\n        >\n          <span className=\"icon\">\n            <i className={classNames(\n              'far',\n              { 'fa-eye': !isSelected },\n              { 'fa-eye-slash': isSelected },\n            )}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem.tsx';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const { todos } = props;\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => {\n          return (\n            <TodoItem key={todo.id} todo={todo} />\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { Status } from '../types/Status';\n\ntype SetQuery = {\n  type: 'filter/SETQUERY',\n  payload: string;\n};\n\ntype SetSelect = {\n  type: 'filter/SETSELECT',\n  payload: Status;\n};\n\nconst setQuery = (query: string): SetQuery => ({\n  type: 'filter/SETQUERY',\n  payload: query,\n});\n\nconst setSelect = (select: Status): SetSelect => ({\n  type: 'filter/SETSELECT',\n  payload: select,\n});\n\ntype State = {\n  query: string,\n  select: Status,\n};\n\ntype Action = SetQuery | SetSelect;\n\nconst initState: State = {\n  query: '',\n  select: 'all',\n};\n\nexport const actions = { setQuery, setSelect };\n\nconst filterReducer = (\n  state: State = initState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'filter/SETQUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'filter/SETSELECT':\n      return {\n        ...state,\n        select: action.payload,\n      };\n\n    default:\n      return { ...state };\n  }\n};\n\nexport default filterReducer;\n","import { ChangeEvent } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter = () => {\n  const dispatch = useAppDispatch();\n  const { query, select } = useAppSelector(state => state.filter);\n\n  const handleSearchInput = (event: ChangeEvent<HTMLInputElement>) => {\n    dispatch(actions.setQuery(event.target.value));\n  };\n\n  const handleClearSearchInput = () => {\n    dispatch(actions.setQuery(''));\n  };\n\n  const handleSelectInput = (event: ChangeEvent<HTMLSelectElement>) => {\n    dispatch(actions.setSelect(event.target.value as Status));\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={select}\n            onChange={handleSelectInput}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleSearchInput}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {!!query.length\n          && (\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClearSearchInput}\n              aria-label=\"clearSearch\"\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal = () => {\n  const dispatch = useAppDispatch();\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  const [user, setUser] = useState<User | null>(null);\n\n  const {\n    id = 0,\n    userId = 0,\n    title = '',\n    completed = false,\n  } = selectedTodo || {};\n\n  const handleRemoveSelectedTodo = () => {\n    dispatch(actions.removeTodo());\n  };\n\n  useEffect(() => {\n    (async () => {\n      setUser(await getUser(userId));\n    })();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleRemoveSelectedTodo}\n              aria-label=\"delete\"\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Todo } from '../../types/Todo';\n\nfunction includesValue(searchStr: string, value: string) {\n  return searchStr.toLowerCase().includes(value.toLowerCase());\n}\n\nexport function getFilteredTodos(\n  todos: Todo[],\n  searchValue: string,\n  selectValue: string,\n): Todo[] {\n  let newTodos = [...todos];\n\n  switch (selectValue) {\n    case 'completed':\n      newTodos = newTodos.filter(todo => (\n        todo.completed\n        && includesValue(todo.title, searchValue)\n      ));\n      break;\n\n    case 'active':\n      newTodos = newTodos.filter(todo => (\n        !todo.completed\n        && includesValue(todo.title, searchValue)\n      ));\n      break;\n\n    case 'all':\n      newTodos = newTodos.filter(todo => (\n        includesValue(todo.title, searchValue)\n      ));\n      break;\n\n    default: throw new Error('Error: Invalid selectValue');\n  }\n\n  return newTodos;\n}\n","import { Todo } from '../types/Todo';\n\ntype SetTodos = {\n  type: 'todos/SET',\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]):SetTodos => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\ntype Action = SetTodos;\n\nexport const actions = { setTodos };\n\nconst todosReducer = (\n  state: Todo[] = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return [...state];\n  }\n};\n\nexport default todosReducer;\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { getFilteredTodos } from './components/helpers/getFilteredTodos';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [todosFromServer, setTodosFromServer] = useState<Todo[]>([]);\n  const [todoListLoaded, setTodolistLoaded] = useState(false);\n\n  const dispatch = useAppDispatch();\n  const { query, select } = useAppSelector(state => state.filter);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const visibleTodos = useAppSelector(state => state.todos);\n\n  useEffect(() => {\n    (async () => {\n      setTodosFromServer(await getTodos());\n      setTodolistLoaded(true);\n    })();\n  }, []);\n\n  useEffect(() => {\n    dispatch(actions.setTodos(getFilteredTodos(todosFromServer, query, select)));\n  }, [query, select, todosFromServer]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {todoListLoaded\n                ? (\n                  <TodoList\n                    todos={visibleTodos}\n                  />\n                )\n                : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo\n      && <TodoModal />}\n    </>\n  );\n};\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './App';\nimport { store } from './app/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}